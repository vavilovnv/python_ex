"""
G. Интересное путешествие
Не секрет, что некоторые программисты очень любят путешествовать. Хорошо всем
известный программист Петя тоже очень любит путешествовать, посещать музеи и
осматривать достопримечательности других городов.
Для перемещений между из города в город он предпочитает использовать машину.
При этом он заправляется только на станциях в городах, но не на станциях по
пути. Поэтому он очень аккуратно выбирает маршруты, чтобы машина не заглохла в
дороге. А ещё Петя очень важный член команды, поэтому он не может себе
позволить путешествовать слишком долго. Он решил написать программу, которая
поможет ему с выбором очередного путешествия. Но так как сейчас у него слишком
много других задач, он попросил вас помочь ему.
Расстояние между двумя городами считается как сумма модулей разности по каждой
из координат. Дороги есть между всеми парами городов.

Формат ввода
В первой строке входных данных записано количество городов n (2 ≤ n ≤ 1000). В
следующих n строках даны два целых числа: координаты каждого города, не
превосходящие по модулю миллиарда. Все города пронумерованы числами от 1 до n
в порядке записи во входных данных.
В следующей строке записано целое положительное число k, не превосходящее двух
миллиардов, — максимальное расстояние между городами, которое Петя может
преодолеть без дозаправки машины.
В последней строке записаны два различных числа — номер города, откуда едет
Петя, и номер города, куда он едет.

Формат вывода
Если существуют пути, удовлетворяющие описанным выше условиям, то выведите
минимальное количество дорог, которое нужно проехать, чтобы попасть из
начальной точки маршрута в конечную. Если пути не существует, выведите -1.

Пример 1
Ввод
7
0 0
0 2
2 2
0 -2
2 -2
2 -1
2 1
2
1 3
Вывод
2

Пример 2
Ввод
4
0 0
1 0
0 1
1 1
2
1 4
Вывод
1

Пример 3
Ввод
4
0 0
2 0
0 2
2 2
1
1 4
Вывод
-1
"""

def bfs(paths, a, b):
    """Обходит граф в ширину вычисляя расстояние между городами a и b."""
    distance = [-1] * len(paths)  # список расстояний
    distance[a] = 0  # расстояние в точке a равно нулю
    towns = [a]  # очередь из городов, которые надо посетить

    while towns:
        path = towns.pop(0)
        for town in paths[path]:
            if distance[town] == -1:  # если -1, значит город не посещали
                towns.append(town)  # добавляем в очередь на посещение
                distance[town] = distance[path] + 1  # увеличиваем длину пути
    return distance[b]


def get_dist(c1, c2):
    """Вычисляет расстояние между координатами."""
    return abs(c2[0] - c1[0]) + abs(c2[1] - c1[1])


def get_path_length(coords, k, start, end):
    """Вычисляет минимальное количество дорог, которое нужно проехать,
    чтобы попасть из начальной точки маршрута в конечную."""
    # сразу проверяем, хватит ли бензина доехать из start в stop
    if get_dist(coords[start], coords[end]) <= k:
        return 1
    tracks = []  # список для хранения путей из номеров городов
    for city1 in coords:
        # в список добавляем только те пути, на которые хватает бензина
        tracks.append([index for index, city2 in enumerate(coords)
                      if get_dist(city1, city2) <= k])
    # запускаем обход графа в ширину
    return bfs(tracks, start, end)


if __name__ == '__main__':
    # координаты городов
    coords = [tuple(map(int, input().split()))
              for _ in range(int(input()))]
    # запас бензина на поездку между городами
    k = int(input())
    # пункты назначения: start - откуда едем, stop - куда
    start, end = [int(i) - 1 for i in input().split()]
    print(get_path_length(coords, k, start, end))
