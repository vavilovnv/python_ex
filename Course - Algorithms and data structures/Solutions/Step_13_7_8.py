# Условие задачи https://stepik.org/lesson/364273/step/8?unit=756080

"""
Доктор Хаус
Каждый день к Грегори Хаусу приходит много больных, и у каждого измеряется
уровень гемоглобина в крови. Данные по всем пациентам заносятся в базу
данных.

Но волчанка попадается один раз на миллион, а работать с остальными
неинтересно. Чтобы Хаус не выгонял больных, Кадди иногда запрашивает
статистику по k последним больным: ей хочется знать сумму их уровня
гемоглобина.

Также Хаус — мизантроп: он смотрит уровень гемоглобина больного, который
поступил к нему позже всех, и, видя, что это точно не волчанка, выписывает его
 из больницы и удаляет информацию о нем из базы.

Автоматизацию процесса Хаус поручил Чейзу. Но Чейз почему-то не справился с
этой задачей и попросил вас ему помочь.


Входные данные

Первой строкой входного файла задано число n ( 1 ≤ n ≤ 100 000 )  — число
обращений к базе данных.
В последующих строках идут запросы. 1 запрос на одной строке.
Запросы к базе выглядят следующим образом: 
+ x (1 ≤ x ≤ 10^9) — добавить пациента c уровнем гемоглобина x в базу;
- — удалить последнего пациента из базы;
? k ( 1≤ k ≤ 100 000 )  — вывести суммарный гемоглобин последних k пациентов.
Гарантируется, что k не превосходит число элементов в базе. Также
гарантируется, что запросов на удаление к пустой базе не поступает. Перед
началом работы база данных пуста.
 

Выходные данные

Для каждого запроса - вывести уровень гемоглобина в крови пациента, а для
каждого запроса ? k — суммарный гемоглобин у последних k поступивших
пациентов. Ответы выводите в порядке поступления запросов.
"""

def main():
    n, stack = int(input()), []
    for i in range(n):
        query = input()
        if query.startswith('+'):
            value = int(query[1:])
            v_sum = value if not stack else stack[-1][1] + value
            stack.append((value, v_sum))
        elif query.startswith('-'):
            print(stack.pop()[0])
        else:
            k = int(query[1:])
            print(stack[-1][1] - stack[-k][1] + stack[-k][0])


if __name__ == '__main__':
    main()
